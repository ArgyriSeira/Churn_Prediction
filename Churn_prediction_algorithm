import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random
from datetime import datetime


users = pd.read_csv('users.csv', delimiter=',')
users.drop(columns=['city', 'num_referrals', 'num_successful_referrals'], inplace=True)
users.fillna(0, inplace=True)
users['user_id'] = users['user_id'].str.extract('(\d+)', expand=True).astype(int)
users['age'] = datetime.now().year - users['birth_year']
gens = []
for age in users['age']:
    if age in [74, 91]:
        gen ='silent_gen'
    elif age in [55, 73]:
        gen = 'baby_boomers_gen'
    elif age in [39, 54]:
        gen = 'gen_x'
    elif age in [23, 38]:
        gen = 'mil_gen'
    else:
        gen = 'gen_z'
    gens.append(gen)
users['gen'] = gens



gdp_total = []
for country in users['country']:
    if country in ['GB', 'PL', 'FR', 'ES', 'DE', 'CH', 'IT', 'NL', 'BE', 'SE', 'NO', 'AT', 'AU']:
        gdp = 'high_GDP'
    elif country in ['IE', 'RO', 'LT', 'PT', 'CZ', 'GR', 'HU', 'BG', 'DK', 'SI', 'SK', 'HR', 'FI', 'LU']:
        gdp = 'medium_GDP'
    elif country in ['MT', 'CY', 'LV', 'JE', 'GI', 'EE', 'GG', 'GP', 'IM', 'RE', 'IS', 'LI', 'MQ']:
        gdp = 'low_GDP'
    gdp_total.append(gdp)

users['gdp'] = gdp_total


# NOTIFICATIONS
notifications = pd.read_csv('notifications.csv', delimiter=',')
notifications = notifications[notifications['reason'] != 'SILVER_ENGAGEMENT_FEES_SAVED']
notifications = notifications[notifications['reason'] != 'SILVER_ENGAGEMENT_INACTIVE_CARD']
notifications['user_id'] = notifications['user_id'].str.extract('(\d+)', expand=True).astype(int)

created_date_new_not = []
for cr_date in notifications['created_date']:
    date_new = datetime.strptime(cr_date, "%Y-%m-%d %H:%M:%S.%f")
    created_date_new_not.append(date_new)
notifications['created_date'] = created_date_new_not
notifications['created_date'] = notifications['created_date'].dt.date

users_notifications = notifications['user_id'].value_counts()

user_notif = []
for user in users['user_id']:
    if user in users_notifications:
        notif = users_notifications[user]
    else:
        notif = 0
    user_notif.append(notif)
users['notifications'] = user_notif

users = users[users['notifications'] <= 40]


# TRANSACTIONS

transactions_1 = pd.read_csv('transactions_1.csv')
transactions_2 = pd.read_csv('transactions_2.csv')
transactions_3 = pd.read_csv('transactions_3.csv')
transactions = transactions_1.append(transactions_2).append(transactions_3)
transactions = transactions[transactions['transactions_type'] != 'CASHBACK']
transactions['ea_cardholderpresence'].fillna(0, inplace=True)
transactions['ea_merchant_mcc'].fillna(0, inplace=True)
transactions.drop(columns=['ea_merchant_city'], inplace=True)
transactions['ea_merchant_country'].fillna(0, inplace=True)
transactions['user_id'] = transactions['user_id'].str.extract('(\d+)', expand=True).astype(int)
created_date_new_trans = []
for cr_date in transactions['created_date']:
    date_new = datetime.strptime(cr_date, "%Y-%m-%d %H:%M:%S.%f")
    created_date_new_trans.append(date_new)
transactions['created_date'] = created_date_new_trans
transactions['created_date'] = transactions['created_date'].dt.date
users_transactions = transactions['user_id'].value_counts()
user_trans = []
for user in users['user_id']:
    if user in users_transactions:
        trans = users_transactions[user]
    else:
        trans = 0
    user_trans.append(trans)
users['transactions'] = user_trans
users = users[users['transactions'] < 2300]





created_date_new = []
for cr_date in users['created_date']:
    date_new = datetime.strptime(cr_date, "%Y-%m-%d %H:%M:%S.%f")
    created_date_new.append(date_new)

users['created_date'] = created_date_new
users['created_date'] = users['created_date'].dt.date

mapping = {'STANDARD': 0, 'SILVER': 1, 'GOLD': 1}


def map_plan(x):
    if x in mapping:
        return mapping[x]
    else:
        return x


users['plan'] = users['plan'].apply(map_plan)

users['attributes_notifications_marketing_push'] = users['attributes_notifications_marketing_push'].astype(int)
users['attributes_notifications_marketing_email'] = users['attributes_notifications_marketing_email'].astype(int)


users = users[users['num_contacts'] <= 800]
contact_grp = []
for contacts in users['num_contacts']:
    if contacts == 0:
        group = 'zero_cont_activity'
    elif contacts in range(1, 99):
        group = 'light_cont_activity'
    else:
        group = 'heavy_cont_activity'
    contact_grp.append(group)
users['contacts'] = contact_grp

months_active = []
for s in users['created_date']:
    active = (datetime.now().year-s.year)*12 + (datetime.now().month - s.month)
    months_active.append(active)
users['months_active'] = months_active

users['notifications_per_month'] = users['notifications'] / users['months_active']
users['transactions_per_month'] = users['transactions'] / users['months_active']


# Inbounds and Outbounds

mapping = {'OUTBOUND': -1, 'INBOUND': 1}


def map_direction(x):
    if x in mapping:
        return mapping[x]
    else:
        return x


transactions['actual_amount'] = transactions['direction'].apply(map_direction) * transactions['amount_usd']


# b = transactions.groupby(['user_id', 'direction'])['actual_amount'].agg(['count', 'sum'])
idx = pd.IndexSlice
# outbounds = b.loc[idx[:, 'OUTBOUND'], 'sum']
# inbounds = b.loc[idx[:, 'INBOUND'], 'sum']
#
#
# df1 = outbounds.reset_index()
# df2 = inbounds.reset_index()
#
# outbounds_full = []
# for user in users['user_id']:
#     if user in df1['user_id']:
#         outbound = df1['sum'][user]
#     else:
#         outbound = 0
#     outbounds_full.append(outbound)
#
#
# inbounds_full = []
# for user in users['user_id']:
#     if user in df2['user_id']:
#         inbound = df2['sum'][user]
#     else:
#         inbound = 0
#     inbounds_full.append(inbound)
#
# users['outbound_sum'] = outbounds_full
# users['inbound_sum'] = inbounds_full
#
#
# users['outbound_per_month'] = users['outbound_sum']/users['months_active']
# users['inbound_per_month'] = users['inbound_sum']/users['months_active']


def find_quarter(i):
    if i.year == 2018:
        if i.month in [1, 2, 3, 4]:
            q = 1
        if i.month in [5, 6, 7, 8]:
            q = 2
        if i.month in [9, 10, 11, 12]:
            q = 3
    elif i.year == 2019:
        q = 4


    return q
transactions['quarter'] = transactions['created_date'].apply(find_quarter)

amounts = transactions.groupby(['user_id', 'quarter'])['actual_amount'].agg(['sum', 'count'])


q1 = amounts.loc[idx[:, 1], 'sum']
q2 = amounts.loc[idx[:, 2], 'sum']
q3 = amounts.loc[idx[:, 3], 'sum']
q4 = amounts.loc[idx[:, 4], 'sum']

users = pd.merge(users, q1.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'bal_var_q1'}, axis=1)

users = pd.merge(users, q2.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'bal_var_q2'}, axis=1)

users = pd.merge(users, q3.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'bal_var_q3'}, axis=1)

users = pd.merge(users, q4.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'bal_var_q4'}, axis=1)

users['bal_ratio_q1_q2'] = (users['bal_var_q2']) / (users['bal_var_q1'] + 0.0000001)
users['bal_ratio_q2_q3'] = (users['bal_var_q3']) / (users['bal_var_q1'] + users['bal_var_q2'] + 0.0000001)
users['bal_ratio_q3_q4'] = (users['bal_var_q4']) / (users['bal_var_q1'] + users['bal_var_q2'] + users['bal_var_q3'] +0.0000001)

#users['total_bal_var'] = users['inbound_sum'] + users['outbound_sum']
# users['net_flow_ratio'] = users['inbound_sum'] / (-users['outbound_sum'] + 0.00000001)
# users['net_flow_ratio'] = users['net_flow_ratio'].fillna(0)
transactions = pd.get_dummies(transactions, columns=['transactions_type'])

payments = transactions.groupby(['user_id', 'quarter'])['transactions_type_CARD_PAYMENT'].agg(['count', 'sum'])
card_q1 = payments.loc[idx[:, 1], 'sum']
card_q2 = payments.loc[idx[:, 2], 'sum']
card_q3 = payments.loc[idx[:, 3], 'sum']
card_q4 = payments.loc[idx[:, 4], 'sum']

users = pd.merge(users, card_q1.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'card_q1'}, axis=1)

users = pd.merge(users, card_q2.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'card_q2'}, axis=1)

users = pd.merge(users, card_q3.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'card_q3'}, axis=1)

users = pd.merge(users, card_q4.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'card_q4'}, axis=1)


users['card_q1_q2'] = (users['card_q2'] - users['card_q1'])/(users['card_q1'] + 0.0000001)
users['card_q2_q3'] = (users['card_q3'] - users['card_q2'])/(users['card_q2'] + 0.0000001)
users['card_q3_q4'] = (users['card_q4'] - users['card_q3'])/(users['card_q3'] + 0.0000001)

topups = transactions.groupby(['user_id', 'quarter'])['transactions_type_TOPUP'].agg(['count', 'sum'])
topup_q1 = topups.loc[idx[:, 1], 'sum']
topup_q2 = topups.loc[idx[:, 2], 'sum']
topup_q3 = topups.loc[idx[:, 3], 'sum']
topup_q4 = topups.loc[idx[:, 4], 'sum']

users = pd.merge(users, topup_q1.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'topup_q1'}, axis=1)

users = pd.merge(users, topup_q2.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'topup_q2'}, axis=1)

users = pd.merge(users, topup_q3.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'topup_q3'}, axis=1)

users = pd.merge(users, topup_q4.drop(columns='quarter'), on='user_id', how='left')
users['sum'] = users['sum'].fillna(0)
users = users.rename({'sum': 'topup_q4'}, axis=1)

users['topup_q1_q2'] = (users['topup_q2'] - users['topup_q1'])/(users['topup_q1'] + 0.0000001)
users['topup_q2_q3'] = (users['topup_q3'] - users['topup_q2'])/(users['topup_q2'] + 0.0000001)
users['topup_q3_q4'] = (users['topup_q4'] - users['topup_q3'])/(users['topup_q3'] + 0.0000001)
counts = []
for i in range(len(users['user_id'])):
    count = 0
    if users['attributes_notifications_marketing_email'][i] == 1:
        count += 1
    if users['attributes_notifications_marketing_push'][i] == 1:
        count += 1
    if users['bal_ratio_q1_q2'][i] > -0.3:
        count += 1
    if users['bal_ratio_q2_q3'][i] > -0.3:
        count += 1
    if users['bal_ratio_q3_q4'][i] > -0.3:
        count += 1
    if users['card_q1_q2'][i] > -0.3:
        count += 1
    if users['card_q2_q3'][i] > -0.3:
        count += 1
    if users['card_q3_q4'][i] > -0.3:
        count += 1
    if users['topup_q1_q2'][i] > -0.3:
        count += 1
    if users['topup_q2_q3'][i] > -0.3:
        count += 1
    if users['topup_q3_q4'][i] > -0.3:
        count += 1
    counts.append(count)
users['counter'] = counts

def eng(row):
    if row['counter'] > 7:
        val = 'engaged'
    elif row['counter'] <= 7:
        val = 'unengaged'
    return val
users['engagement'] = users.apply(eng, axis=1)
print(users['engagement'].value_counts())

print(users.loc[0])
users.info()
